1)
Algebra relacional

a) s(rut_proveedor = 21212121212-1)(INGREDIENTES) 

) Listar todas las comidas, incluyendo los datos de todos los ingredientes y los datos de los
proveedores.


b) s(rut_proveedor = ing.rut_proveedor)(s(idComida = ing.idComida)(COMIDAS)((p (idComida,calorias,precio) (COMIDAS) X  p(rut_proveedor,razonSocial,direccion,telefono)(PROVEEDORES) X p(idIngrediente, calidad,perecedero)(INGREDIENTES))

Obtener todas las comidas cuya composicion incluye alimentos perecederos.

c) s(idcomida = idcomida and perecedero = true)(p(idComida,calorias,precio) x p (idIngrediente,calidad,perecedero,idComida))

d) s(idCOmida = idCOmida)((s(calorias < 350)(COMIDAS) X p(idIngrediente)(INGREDIENTES))

e) 	PRODUCTO_CARTESIANO_PROVEEDOR_INGREDIENTE <- p(rut_proveedor)(PROVEEDORES) X p (idIngrediente)(INGREDIENTES)
	TABLA_COINCIDENTE_POR_RUT <- s(pro.rut_proveedor = ing.rut_proveedor)(PRODUCTO_CARTESIANO_PROVEEDOR_INGREDIENTE)
	VENDE_PERECEDEROS <- s(perecedero = true)(TABLA_COINCIDENTE_POR_RUT)
	NO_VENDE_PERECEDEROS <- s(perecedero = false)(TABLA_COINCIDENTE_POR_RUT)
	VENDE_AMBOS <- VENDE_PERECEDEROS n NO_VENDE_PERECEDEROS
	
f)	CALIDAD_10 <-s(calidad = 10)(INGREDIENTES)
	PRODUCTO_CARTESIANO_CALIDAD_10_INGRE_COMID <- p(calidad,perecedero,rut_proveedor)(CALIDAD_10) X p(idcomida,precio)(INGREDIENTES_COMIDAS)
	PRECIO_MENOR_500 <- s(precio<500)(PRODUCTO_CARTESIANO_CALIDAD_10_INGRE_COMID)

g)  Liste los proveedores que proveen ingredientes perecederos con que se hacen comidas de
menos de 500Kcal.

	PRODUCTO_COMIDA_INGREDIENTES <- p(idcomida,calorias,precio)(PRECIO) X p(idIngrediente,perecedero,rut_proveedor)(INGREDIENTES)
	CALORIAS_MENOR_500_PERECEDEROS <- s(calorias < 500000 AND perecederos = true)(PRODUCTO_COMIDA_INGREDIENTES)
	PRODUCTO_PROVEEDORES_CALORIAS_MENOR <- CALORIAS_MENOR_500_PERECEDEROS X PROVEEDORES
	PROVEEDORES <- s(rut_proveedor = rut_proveedor)(PRODUCTO_PROVEEDORES_CALORIAS_MENOR)
	
h) Liste las comidas que tienen algun ingrediente que valga menos que el 10% del precio de la
comida

	Ingrediente no tiene un atributo de precio...

i) 	Liste ingredientes que se usan en todas las comidas (la sal????).
	
	PRODUCTO_CARTESIANO_INGREDIENTES_COMIDAS <- INGREDIENTES X COMIDAS
	
	NO_SE_USAN <- PRODUCTO_CARTESIANO_INGREDIENTES_COMIDAS - INGREDIENTES_COMIDAS
	
	SE_USAN_EN_TODAS <- PRODUCTO_CARTESIANO_INGREDIENTES_COMIDAS - NO_SE_USAN
	
	FINAL <- s(ING.idCOmida = COMIDAS.idComida and ING.idCOmida = ING_COM.idCOmida)(SE_USAN_EN_TODAS)
	
j) 	Liste ingredientes que no se usan en ninguna comida.

	PRODUCTO_CARTESIANO_INGREDIENTES_COMIDAS <- INGREDIENTES X COMIDAS
	
	NO_SE_USAN <- PRODUCTO_CARTESIANO_INGREDIENTES_COMIDAS - INGREDIENTES_COMIDAS
	
	FINAL <- s(ING.idCOmida = COMIDAS.idComida and ING.idCOmida = ING_COM.idCOmida)(NO_SE_USAN)


CALCULO RELACIONAL.

a)	Obtener la lista de ingredientes provistos por el proveedor '21212121212-1'

{INGREDIENTES(x) / Vx(INGREDIENTES.rut_proveedor = '21212121212-1')}

b)	Listar todas las comidas, incluyendo los datos de todos los ingredientes y los datos de los
proveedores.

{p.rut_proovedor, p.razonSocial,
p.direccion, p.telefono, ing.idIngrediente,
ing.calidad,ing.perecedero, c.idCOmida | COMIDAS(c) AND INGREDIENTES(ing) AND PROVEEDORES(p)
AND c.idCOmida = ing.idCOmida and ing.rut_proovedor = p.rut_proovedor}

c)	Obtener todas las comidas cuya composici??ncluye alimentos perecederos

		{d.idComida | INGREDIENTES(ing) AND  EXISTE (d) INGREDIENTES_COMIDAS(d) 
		AND d.idIngrediente = g.idIngrediente AND ing.perecedero }

d)



EJERCICIO 2)
CONSULTAS SQL...


MARCAS(MARCA, ORÍGEN)
COSMÉTICOS(NOMBRE,MARCA,PESO,STOCK_ACTUAL)
PERFUMES(NOMBRE,MARCA,CAPACIDAD,STOCK_ACTUAL)
PEDIDOS (NRO_PEDIDO,NOMBRE,MARCA,FECHA_COMPRA,CANTIDAD_PEDIDA)


a) Obtener todos los perfumes que provee la marca “RALPH LAUREN”

select * from PERFUMES
where marca = 'RALPH LAUREN';

b) Obtener las marcas que proveen únicamente perfumes.

select distinct marca from perfumes
EXCEPT
select distinct marca from conmeticos;

c) Obtener las marcas que proveen perfumes y cosméticos.

	select distinct marca from perfumes
	intersect 
	select distinct marca from cosmeticos;
	
d)Buscar los cosméticos (nombre y marca) que tiene stock 0 y no tienen pedidos pendientes
(son los que tienen fecha de compra en nulo)

	select * from cosmeticos c, pedidos p
	where c.nombre = p.nombre
	and c.marca = p.marca
	and c.stock_actual = 0
	and p.fecha_compra is null;

e) Listar todos los pedidos, tanto de cosméticos como de perfumes de la marca “RALPH
LAUREN”

	select * from pedidos
	where marca = 'RALPH LAUREN';

f) Arme un listado, marca por marca, perfume por perfume, con la última fecha de compra y la cantidad total pedida en toda la historia del sistema

	select marca,nombre,fecha_compra (select sum(cp.cantidad_pedidos) from (select cantidad_pedidos from pedidos) 
	from pedidos
	order by marca,perfume,fecha_compra desc;
	
g) Liste la marca que haya tenido algún pedido en todas las fechas (FECHA_COMPRA).



h) Liste la marca que haya pedido la mayor cantidad de perfumes en un pedido.

select rownum, tabla.*
from (select row_number() OVER() rownum, * from perfumes per, pedidos ped
where per.nombre = ped.nombre
and per.marca = ped.marca
order by cantidad_pedida desc);



i) Liste la marca que haya pedido perfumes pero nunca cosméticos.

select distinct marca from pedidos
except 
select distinct  marca from cosmeticos;


j)  Liste las marcas que tienen el mismo nombre de perfume o de cosmético que otra marca.

select marca from (
(select * from marca m, perfumes p
where m.marca = p.marca) mp , (select * from marca m, perfumes p
where m.marca = p.marca ) mp2, (select * from marca m, cosmeticos c
where m.marca = c.marca) c1 , (select * from marca m, cosmeticos c
where m.marca = c.marca ) c2)
where mp.nombre = mp2.nombre 
or c1.nombre = c2.nombre;




